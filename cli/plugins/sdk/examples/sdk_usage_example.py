"""
Example demonstrating the ICARUS CLI Plugin Development SDK usage.

This example shows how to use the SDK programmatically to generate,
validate, test, and package plugins.
"""

import tempfile
from pathlib import Path

from ..docs import PluginDocGenerator
from ..generator import PluginGenerator
from ..packager import PluginPackager
from ..tester import PluginTester
from ..validator import PluginValidator


def main():
    """Demonstrate SDK usage."""
    print("ICARUS CLI Plugin Development SDK Example")
    print("=" * 50)

    # Create temporary directory for example
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # 1. Generate a plugin
        print("\n1. Generating plugin...")
        generator = PluginGenerator()

        plugin_name = "example_plugin"
        plugin_path = temp_path / plugin_name

        success = generator.generate_plugin(
            plugin_name=plugin_name,
            template_name="basic",
            output_dir=str(temp_path),
            author_name="SDK Example",
            author_email="example@icarus.com",
            description="An example plugin generated by the SDK",
        )

        if success:
            print(f"✓ Plugin generated at: {plugin_path}")
        else:
            print("✗ Plugin generation failed")
            return

        # 2. Validate the plugin
        print("\n2. Validating plugin...")
        validator = PluginValidator()

        result = validator.validate_plugin(str(plugin_path))

        if result.is_valid:
            print("✓ Plugin validation passed")
        else:
            print("✗ Plugin validation failed:")
            for error in result.errors:
                print(f"  - {error}")

        # Show warnings if any
        if result.warnings:
            print("⚠ Validation warnings:")
            for warning in result.warnings:
                print(f"  - {warning}")

        # 3. Test the plugin
        print("\n3. Testing plugin...")
        tester = PluginTester()

        test_results = tester.run_plugin_tests(str(plugin_path))

        print(f"Test status: {test_results['overall_status'].upper()}")

        for test_name, test_result in test_results.get("tests", {}).items():
            status = "PASS" if test_result.get("passed", False) else "FAIL"
            print(f"  {test_name}: {status}")

        # 4. Generate documentation
        print("\n4. Generating documentation...")
        doc_generator = PluginDocGenerator()

        docs_dir = plugin_path / "docs"
        generated_docs = doc_generator.generate_documentation(
            plugin_path=str(plugin_path),
            output_dir=str(docs_dir),
            formats=["markdown"],
            include_api=True,
            include_examples=True,
        )

        if generated_docs:
            print("✓ Documentation generated:")
            for doc_type, doc_path in generated_docs.items():
                print(f"  - {doc_type}: {doc_path}")
        else:
            print("✗ Documentation generation failed")

        # 5. Package the plugin
        print("\n5. Packaging plugin...")
        packager = PluginPackager()

        package_path = temp_path / f"{plugin_name}.zip"

        success = packager.package_plugin(
            plugin_path=str(plugin_path),
            output_path=str(package_path),
            format="zip",
            include_tests=False,
            include_docs=True,
            validate=True,
        )

        if success:
            print(f"✓ Plugin packaged at: {package_path}")

            # Get package info
            package_info = packager.get_package_info(str(package_path))
            print(f"  Package size: {package_info['size']} bytes")
            print(f"  Package format: {package_info['format']}")
            print(f"  Files included: {len(package_info['files'])}")
        else:
            print("✗ Plugin packaging failed")

        # 6. Verify the package
        print("\n6. Verifying package...")

        verification_result = packager.verify_package(str(package_path))

        if verification_result["valid"]:
            print("✓ Package verification passed")
        else:
            print("✗ Package verification failed:")
            for error in verification_result["errors"]:
                print(f"  - {error}")

        print("\n" + "=" * 50)
        print("SDK Example completed successfully!")
        print(f"Generated plugin files are in: {plugin_path}")
        print(f"Package created at: {package_path}")


def demonstrate_templates():
    """Demonstrate available plugin templates."""
    print("\nAvailable Plugin Templates:")
    print("-" * 30)

    generator = PluginGenerator()
    templates = generator.list_templates()

    for template_name in templates:
        template_info = generator.get_template_info(template_name)
        print(f"Name: {template_name}")
        print(f"Description: {template_info.description}")
        print(f"Type: {template_info.plugin_type.value}")
        print(f"Security Level: {template_info.security_level.value}")
        print(f"Files: {', '.join(template_info.files)}")
        if template_info.dependencies:
            print(f"Dependencies: {', '.join(template_info.dependencies)}")
        print()


def demonstrate_validation():
    """Demonstrate plugin validation features."""
    print("\nValidation Features:")
    print("-" * 20)

    validator = PluginValidator()

    print("The validator checks:")
    print("- Plugin structure and required files")
    print("- Manifest format and content")
    print("- Python code syntax and quality")
    print("- Security patterns and risks")
    print("- Compatibility requirements")
    print("- Best practices compliance")


if __name__ == "__main__":
    main()
    demonstrate_templates()
    demonstrate_validation()
